@page "/"
@using Microsoft.AspNetCore.Components.Forms
@using System.Text.Json
@using System.Text
@using jp.in4a.CoreDocuNexus.Contracts.Http.AddPasswordToPdf
@using MudBlazor
@inject IJSRuntime JSRuntime
@inject HttpClient Http
@inject jp.in4a.CoreDocuNexus.Web.AppSettings.RootSettings Settings
@inject ISnackbar Snackbar

<PageTitle>パスガ PDF (PassGa PDF)</PageTitle>

<MudContainer MaxWidth="MaxWidth.Medium" Class="mt-4">

    <MudStack Spacing="1" AlignItems="AlignItems.Center">
        @* サービス名 *@
        <MudText Typo="Typo.h3">
            <MudIcon Icon="@Icons.Material.Filled.PictureAsPdf" Color="Color.Primary"  />
            パスガ PDF (PassGa PDF)
        </MudText>

        @* サービス説明 *@
        <MudText Align="Align.Center" Class="mt-4" Style="max-width: 600px;">
            そのPDF、パスガ済み？パスッと決めて、ガシッと守る。<br />
            「パスッと設定、ガシッとガード」をコンセプトに、PDFのパスワード管理にまつわるあらゆる手間を解消し、あなたの時間を守ります。
        </MudText>
    </MudStack>

    @*  ondragenter:Itemがdrag zoneに入ったとき MudPaperの協調表示 Begin
        ondrop     :ItemをDrop zoneの上で放すと MudPaperの協調表示 End
        ondragleave:Itemがdrag zoneから出たとき MudPaperの協調表示 End
        ondragend  :drag itemを放したとき       MudPaperの協調表示 End *@
    <MudStack Style="width: 100%">
        <MudFileUpload T="IReadOnlyList<IBrowserFile>" @ref="@_fileUpload"
                   OnFilesChanged="OnInputFileChanged"
                   MaxFileSize="@MaxSizeByte" Accept=".pdf" Hidden="@false"
                   InputClass="absolute mud-width-full mud-height-full overflow-hidden z-10"
                   InputStyle="opacity:0"
                   tabindex="-1"
                   @ondragenter="@SetDragClass"   @ondrop=     "@ClearDragClass"        
                   @ondragleave="@ClearDragClass" @ondragend=  "@ClearDragClass">
            <ActivatorContent>
                <MudPaper Height="300px" Outlined="true" Class="@_dragClass">
                    <MudText Typo="Typo.h6">PDFファイルをこちらにドラッグ＆ドロップして下さい</MudText>
                        @foreach (var file in _fileNames)
                        {
                            <MudChip T="string" Color="Color.Dark" Text="@file" tabindex="-1" />
                        }
                    </MudPaper>
            </ActivatorContent>
        </MudFileUpload>
        <!-- ファイル選択時の制限事項表示 -->
        <MudText Typo="Typo.body2" Color="Color.Secondary" Class="mb-3">
            ※ PDFファイルのみ、@(Settings.MaxUploadFileSizeMB.ToString("0.#"))MB以下のファイルを選択してください
        </MudText>
        <MudToolBar Gutters="@false">
            <MudButton StartIcon="@Icons.Material.Filled.CloudUpload"
                       Color="Color.Primary"
                       Variant="Variant.Outlined"
                       OnClick="@OpenFilePickerAsync">
                PDFファイルを選択
            </MudButton>

            <MudSpacer /> @* ← これを追加して左右に振り分ける *@

            <MudButton Class="mr-2" 
                       StartIcon="@Icons.Material.Filled.Clear"
                       Color="Color.Error"
                       Variant="Variant.Outlined" 
                       OnClick="@ClearAsync"
                       Disabled="@(!_fileNames.Any())">
                クリア
            </MudButton>

            <MudButton StartIcon="@Icons.Material.Filled.DataExploration"
                       Color="Color.Primary"
                       Variant="Variant.Filled"
                       OnClick="@Upload"
                       Disabled="@(!_fileNames.Any())">
                PDF変換
            </MudButton>
        </MudToolBar>
       
        @if (showPasswordForm)
            {
            <MudCard Elevation="2" Class="mt-4">
                <MudCardHeader>
                    <CardHeaderContent>
                        <MudText Typo="Typo.h6">パスワード設定</MudText>
                    </CardHeaderContent>
                </MudCardHeader>
                <MudCardContent>
                    <MudGrid Spacing="2">
                        <MudItem xs="12" md="6">
                            <MudTextField @bind-Value="userPassword"
                                          Label="閲覧パスワード"
                                          Variant="Variant.Outlined"
                                          HelperText="PDFを開く際に必要なパスワード"
                                          InputType="InputType.Password"
                                          Adornment="Adornment.End" />
                        </MudItem>

                        <MudItem xs="12" md="6">
                            <MudTextField @bind-Value="ownerPassword"
                                          Label="編集パスワード"
                                          Variant="Variant.Outlined"
                                          HelperText="PDF編集時に必要なパスワード"
                                          InputType="InputType.Password"
                                          Adornment="Adornment.End" />
                        </MudItem>
                    </MudGrid>
                </MudCardContent>
            </MudCard>
            }
    </MudStack>



    <!-- 処理中表示 -->
    @if (isProcessing)
    {
        <MudGrid Class="mt-4">
            <MudItem xs="12" Class="text-center">
                <MudProgressCircular Indeterminate="true" />
                <MudText Typo="Typo.body1" Class="mt-2">
                    @processingMessage
                </MudText>
            </MudItem>
        </MudGrid>
    }

    <!-- エラーメッセージ表示 -->
    @if (!string.IsNullOrEmpty(errorMessage))
    {
        <MudAlert Severity="Severity.Error" Class="mt-4">
            @errorMessage
        </MudAlert>
    }

    <!-- 成功メッセージ表示 -->
    @if (!string.IsNullOrEmpty(successMessage))
    {
        <MudAlert Severity="Severity.Success" Class="mt-4">
            @successMessage
        </MudAlert>
    }
    
</MudContainer>

 <MudLink Href="/home-g">
    Gemini
</MudLink>
<MudLink Href="/home-c">
    Claude
</MudLink>

@code {
    
    private long MaxSizeByte = 1;   // 最大ファイルサイズ（バイト単位）

    // UI状態管理のプロパティ
    private bool isProcessing = false;               // 処理中フラグ
    private string processingMessage = string.Empty; // 処理中メッセージ
    private string errorMessage = string.Empty;      // エラーメッセージ
    private string successMessage = string.Empty;    // 成功メッセージ

    private MudFileUpload<IReadOnlyList<IBrowserFile>>? _fileUpload;
    private List<IBrowserFile> _fileList = new();
    private readonly List<string> _fileNames = new();
    
    private const string DefaultDragClass = "relative rounded-lg border-2 border-dashed pa-4 mt-4 mud-width-full mud-height-full";
    private string _dragClass = DefaultDragClass;

    private bool showPasswordForm = false;

    // パスワード関連のプロパティ
    private string userPassword = string.Empty;      // 閲覧パスワード
    private string ownerPassword = string.Empty;     // 編集パスワード

    /// <summary>
    /// 初期処理
    /// </summary>
    protected override void OnInitialized()
    {
        // settingsから最大ファイルサイズを取得
        MaxSizeByte = Convert.ToInt64(Settings.MaxUploadFileSize);
    }

    // クリア処理
    private async Task ClearAsync()
    {
        await (_fileUpload?.ClearAsync() ?? Task.CompletedTask);
        _fileList.Clear();
        _fileNames.Clear();
        showPasswordForm = false;
        // MudPaperの協調表示 End
        ClearDragClass();
    }

    // ファイル選択ダイアログを開く非同期メソッド
    private Task OpenFilePickerAsync()
    => _fileUpload?.OpenFilePickerAsync() ?? Task.CompletedTask;

    // ファイル選択時の処理
    private void OnInputFileChanged(InputFileChangeEventArgs e)
    {
        try
        {
            showPasswordForm = false;
            // MudPaperの協調表示 End
            ClearDragClass();
            // 選択されたファイルを取得
            var files = e.GetMultipleFiles();
            foreach (var file in files)
            {
                // ファイルサイズチェック（1MB = 1,048,576 bytes）
                if (file.Size > MaxSizeByte)
                {
                    errorMessage = "ファイルサイズが10MBを超えています。10MB以下のファイルを選択してください。";
                    return;
                }
                // PDFファイル形式チェック
                if (!file.ContentType.Equals("application/pdf", StringComparison.OrdinalIgnoreCase) &&
                    !file.Name.EndsWith(".pdf", StringComparison.OrdinalIgnoreCase))
                {
                    errorMessage = "PDFファイルを選択してください。";
                    return;
                }

                _fileList.Add(file);
                _fileNames.Add(file.Name);
                showPasswordForm = true;
                break;
            }
        }catch (Exception ex)
        {
            errorMessage = $"ファイル選択時にエラーが発生しました: {ex.Message}";
        }
    }

    // ファイルアップロードの処理
    private async Task Upload()
    {
        // ファイルが選択されていない、またはパスワードが設定されていない場合は処理を中止
        if (!IsSelectFile() || !CanSetPassword()) return;

        try
        {
            // メッセージエリアを初期化
            processingMessage = "パスワードを設定しています...";
            ClearMessages();
            StateHasChanged();

            // ファイルをバイト配列として読み込み
            using var stream = _fileList[0].OpenReadStream(maxAllowedSize: MaxSizeByte);
            var buffer = new byte[_fileList[0].Size];
            await stream.ReadAsync(buffer);

            // リクエスト作成
            var request = new AddPasswordToPdfRequest
            {
                PdfFile = buffer,
                UserPassword = userPassword,
                OwnerPassword = ownerPassword
            };

            var json = JsonSerializer.Serialize(request);
            var content = new StringContent(json, Encoding.UTF8, "application/json");

            // API呼び出し
            var response = await Http.PostAsync("api/AddPasswordToPdf", content);
            var responseJson = await response.Content.ReadFromJsonAsync<AddPasswordToPdfResponse>();

            // エラーメッセージが設定されている場合は処理を中止
            if (!CheckResponse(response, responseJson)) return;

            // 成功メッセージを設定
            // ブラウザでファイルダウンロードを実行
            await DownloadFile(responseJson!.PdfFile, DateTime.Now.ToString("yyyyMMdd_HHmmss_") + _fileList[0].Name);

            Snackbar.Configuration.PositionClass = Defaults.Classes.Position.TopCenter;
            Snackbar.Add("ダウンロードが完了しました。");


        }catch (Exception ex)
        {
            errorMessage = $"パスワード設定処理中にエラーが発生しました: {ex.Message}";
            return;
        }
        finally
        {
            // 処理中状態を解除
            isProcessing = false;
            processingMessage = string.Empty;
            StateHasChanged();
        }   
    }

    private bool CheckResponse(HttpResponseMessage response, AddPasswordToPdfResponse? responseJson)
    {
        // レスポンスがnullまたは成功フラグがfalseの場合はエラー
        if (response.IsSuccessStatusCode)
        {
            if (responseJson == null)
            {
                errorMessage = "APIからのレスポンスが無効です。";
                return false;
            }
            if (!responseJson.Success)
            {
                errorMessage = $"APIエラー: {responseJson.Message}";
                return false;
            }

            // 
            return true;
        }
        else
        {
            // 400エラーの場合、レスポンスボディにエラー情報が含まれる
            if (response.StatusCode == System.Net.HttpStatusCode.BadRequest)
            {
                errorMessage = "400エラー: APIエラー: 無効なリクエストです。";
                return false;
            }
            // 500エラーの場合、レスポンスボディは空
            else if (response.StatusCode == System.Net.HttpStatusCode.InternalServerError)
            {

                errorMessage = "500エラー: サーバー内部エラー";
                return false;
            }
            else
            {
                errorMessage = $"{(int)response.StatusCode}エラー: {response.ReasonPhrase}";
                return false;
            }
        }
    }

    /// <summary>
    /// ファイルダウンロード処理
    /// </summary>
    /// <param name="fileBytes">ファイルのバイト配列</param>
    /// <param name="fileName">ダウンロードファイル名</param>
    private async Task DownloadFile(byte[] fileBytes, string fileName)
    {
        // JavaScriptを使用してファイルダウンロードを実行
        await JSRuntime.InvokeVoidAsync("downloadFile", Convert.ToBase64String(fileBytes), fileName);
    }

    private bool IsSelectFile()
    {
        // ファイルが選択されているかチェック
        return _fileList.Count > 0;
    }

    /// <summary>
    /// パスワード設定可能かチェック
    /// </summary>
    /// <returns>設定可能な場合true</returns>
    private bool CanSetPassword()
    {
        // 閲覧パスワードまたは編集パスワードのいずれかが入力されている場合に設定可能
        return !string.IsNullOrWhiteSpace(userPassword) || !string.IsNullOrWhiteSpace(ownerPassword);
    }

    /// <summary>
    /// メッセージをクリア
    /// </summary>
    private void ClearMessages()
    {
        errorMessage = string.Empty;
        successMessage = string.Empty;
    }

    // MudPaperの協調表示 Begin
    private void SetDragClass()
        => _dragClass = $"{DefaultDragClass} mud-border-primary";

    // MudPaperの協調表示 End
    private void ClearDragClass()
        => _dragClass = DefaultDragClass;
}
