// In CoreDocuNexus.Web/Pages/TestApi.razor
@page "/test-api"
@using System.Text
@using System.Text.Json
@using jp.in4a.CoreDocuNexus.Contracts.Http.AddPasswordToPdf
@using jp.in4a.CoreDocuNexus.Contracts.Http.Greetings
@inject HttpClient Http

<h3>API Connectivity Test</h3>

<button class="btn btn-primary" @onclick="CallApi1">Call API</button>
<br /><p>@url</p>

@if (_isLoading)
{
    <p><em>Loading...</em></p>
}
else if (_response != null)
{
    <p><strong>Message:</strong> @_response.Message</p>
    <p><strong>Timestamp:</strong> @_response.Timestamp.ToLocalTime()</p>
}
else if (!string.IsNullOrEmpty(_errorMessage))
{
    <p style="color: red;">@_errorMessage</p>
}


<hr />

<button class="btn btn-primary" @onclick="CallApi2" disabled="@_isLoading">
    @(_isLoading ? "送信中..." : "テスト実行")
</button>

<div class="mt-3">
    <p><strong>ステータス:</strong> @status</p>
    <p><strong>送信データ:</strong> @sendText</p>
    <p><strong>受信データ:</strong> @responseText</p>
</div>


@code {
    private GreetingResponse? _response;
    private string? _errorMessage;
    private bool _isLoading = false;
    private string url = string.Empty;

    private string status = "待機中";
    private string sendText = "";
    private string responseText = "";

    private async Task CallApi1()
    {
        _isLoading = true;
        _errorMessage = string.Empty;
        _response = null;

        try
        {
            // ここでContractsプロジェクトを参照し、型安全にデシリアライズする
            _response = await Http.GetFromJsonAsync<GreetingResponse>("api/Greeting");
            url = Http.BaseAddress + "api/Greeting";
        }
        catch (Exception ex)
        {
            _errorMessage = "Failed to call API: " + ex.Message;
        }
        finally
        {
            _isLoading = false;
        }
    }

    private async Task CallApi2()
    {
        _isLoading = true;
        status = "送信中";
        try
        {
            // "あいうえお"をバイト配列に変換
            sendText = "あいうえお";
            var sendBytes = Encoding.UTF8.GetBytes(sendText);

            // リクエスト作成
            var request = new AddPasswordToPdfRequest
            {
                PdfFile = sendBytes,
                UserPassword = "test123",
                OwnerPassword = "owner456"
            };
            var json = JsonSerializer.Serialize(request);
            var content = new StringContent(json, Encoding.UTF8, "application/json");

            // API呼び出し
            var response = await Http.PostAsync("api/AddPasswordToPdf", content);
            var responseJson = await response.Content.ReadAsStringAsync();

            if (response.IsSuccessStatusCode)
            {
                var result = await response.Content.ReadFromJsonAsync<AddPasswordToPdfResponse>();
                if (result?.Success == true)
                {
                    responseText = result.PdfFile != null ? Encoding.UTF8.GetString(result.PdfFile) : "データなし";
                    status = "成功";
                }
                else
                {
                    status = $"API エラー: {result?.Message}";
                }
            }
            else
            {
                // 400エラーの場合、レスポンスボディにエラー情報が含まれる
                if (response.StatusCode == System.Net.HttpStatusCode.BadRequest)
                {
                    try
                    {
                        var errorResult = JsonSerializer.Deserialize<AddPasswordToPdfResponse>(responseJson);
                        status = $"400エラー: {errorResult?.Message}";
                    }
                    catch
                    {
                        status = $"400エラー: {responseJson}";
                    }
                }
                // 500エラーの場合、レスポンスボディは空
                else if (response.StatusCode == System.Net.HttpStatusCode.InternalServerError)
                {
                    status = "500エラー: サーバー内部エラー";
                }
                else
                {
                    status = $"{(int)response.StatusCode}エラー: {response.ReasonPhrase}";
                }
            }
        }
        catch (Exception ex)
        {
            status = $"エラー: {ex.Message}";
        }
        finally
        {
            _isLoading = false;
        }

        // try
        // {
        //     // "あいうえお"をバイト配列に変換
        //     sendText = "あいうえお";
        //     var sendBytes = Encoding.UTF8.GetBytes(sendText);

        //     // リクエスト作成
        //     var request = new AddPasswordToPdfRequest
        //     {
        //         PdfFile = sendBytes,
        //         ViewerPassword = "123",
        //         OwnerPassword = "444"
        //     };
        //     var json = JsonSerializer.Serialize(request);
        //     var content = new StringContent(json, Encoding.UTF8, "application/json");

        //     // API呼び出し
        //     var response = await Http.PostAsync("api/AddPasswordToPdf", content);
        //     var responseJson = await response.Content.ReadAsStringAsync();
        //     var result = JsonSerializer.Deserialize<AddPasswordToPdfResponse>(responseJson);

        //     // 受信したバイト配列を文字列に変換
        //     responseText = result?.PdfFile != null ? Encoding.UTF8.GetString(result.PdfFile) : "データなし";

        //     status = response.IsSuccessStatusCode && result?.Success == true ? "成功" : $"エラー: {result?.Message}";
        // }
        // catch (Exception ex)
        // {
        //     status = $"エラー: {ex.Message}";
        // }
        // finally
        // {
        //     _isLoading = false;
        // }
    }
}