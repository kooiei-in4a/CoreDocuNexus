@page "/pass-ga"
@using Microsoft.AspNetCore.Components.Forms
@using System.Text.Json
@using System.Text
@using jp.in4a.CoreDocuNexus.Contracts.Http.AddPasswordToPdf
@using MudBlazor
@inject IJSRuntime JSRuntime
@inject HttpClient Http
@inject jp.in4a.CoreDocuNexus.Web.AppSettings.RootSettings Settings
@inject ISnackbar Snackbar

<style>
    /* Minimal & Clean スタイル */
    body {
        background-color: #f8f9fa; /* わずかにグレーの背景 */
        font-family: 'Segoe UI', 'Meiryo', 'Hiragino Sans', 'sans-serif';
        color: #212529;
    }

    .passga-container-minimal {
        max-width: 600px;
        margin: 4rem auto;
        padding: 2rem;
        background-color: #ffffff;
        border: 1px solid #dee2e6; /* 細い境界線 */
        border-radius: 8px;
    }

    .passga-header h1 {
        font-size: 1.75rem;
        font-weight: 600;
        margin-bottom: 0.5rem;
        color: #0d6efd; /* ブランドカラー */
    }

    .passga-header p {
        font-size: 0.9rem;
        color: #6c757d; /* 少し薄いテキストカラー */
        margin-bottom: 2rem;
    }

    .upload-box-minimal {
        border: 2px solid #dee2e6; /* 実線 */
        border-radius: 8px;
        padding: 3rem 2rem;
        text-align: center;
        background-color: #f8f9fa;
        margin-bottom: 2rem;
        cursor: pointer;
    }

        .upload-box-minimal p {
            margin-bottom: 1rem;
            color: #6c757d;
        }

    .form-section-minimal h2 {
        font-size: 1.1rem;
        font-weight: 600;
        margin-bottom: 1.5rem;
        border-bottom: 1px solid #dee2e6;
        padding-bottom: 0.75rem;
    }

    .form-group-minimal {
        margin-bottom: 1.5rem;
    }

        .form-group-minimal label {
            display: block;
            font-weight: 500;
            margin-bottom: 0.5rem;
            font-size: 0.9rem;
        }

        .form-group-minimal small {
            font-size: 0.8rem;
            color: #6c757d;
        }

    .form-control-minimal {
        width: 100%;
        padding: 0.75rem;
        font-size: 1rem;
        border: 1px solid #ced4da;
        border-radius: 4px;
        box-sizing: border-box; /* 忘れずに */
    }

    .btn {
        display: inline-block;
        font-weight: 500;
        text-align: center;
        vertical-align: middle;
        cursor: pointer;
        border: 1px solid transparent;
        padding: 0.25rem 0.75rem;
        font-size: 1rem;
        border-radius: 4px;
        text-decoration: none;
        width: 100%; /* 幅を100%に */
    }

    .btn-primary-minimal {
        color: #fff;
        background-color: #0d6efd;
        border-color: #0d6efd;
    }

    .btn-secondary-minimal {
        color: #0d6efd;
        background-color: transparent;
        border-color: #0d6efd;
    }

</style>

<MudContainer>
    <div class="passga-container-minimal">


        <!-- 処理中オーバーレイ -->
        <MudOverlay Visible="isProcessing" DarkBackground="true" Absolute="true" ZIndex="2">
            <div class="d-flex flex-column align-center">
                <MudProgressCircular Color="Color.Primary" Indeterminate="true" Size="Size.Large" />
                <MudText Typo="Typo.h6" Class="mt-4" Style="color: white;">@processingMessage</MudText>
            </div>
        </MudOverlay>
        <div class="passga-header">
            <h1>PassGa PDF</h1>
            <p>「パスッと設定、ガシッとガード」をコンセプトに、PDFのパスワード管理をシンプルにします。</p>
        </div>

        @* <div class="upload-box-minimal"> *@

        <MudFileUpload T="IReadOnlyList<IBrowserFile>" @ref="@_fileUpload"
                       OnFilesChanged="OnInputFileChanged"
                       Disabled="isProcessing"
                       MaxFileSize="MaxSizeByte" Accept=".pdf" Hidden="@false"
                       InputStyle="opacity:0"
                       tabindex="-1"
                       @ondragenter="@SetDragClass" @ondrop="@ClearDragClass"
                       @ondragleave="@ClearDragClass" @ondragend="@ClearDragClass">

            <ActivatorContent>
                <MudPaper Class="@_dragClass" Elevation="0"
                          Style="
    border: 2px solid #dee2e6; /* 実線 */
    border-radius: 8px;
    padding: 3rem 2rem;
    text-align: center;
    background-color: #f8f9fa;
    margin-bottom: 2rem;
    cursor: pointer;">

                    @foreach (var file in _fileList)
                    {
                        <MudItem xs="12" sm="6" md="6">
                            <MudChip T="string" Color="Color.Dark" Text="@(file.Name + "(" + FormatFileSize(file.Size) + ")")" tabindex="-1" />
                        </MudItem>
                    }

                    <p>PDFファイルをここにドラッグ＆ドロップ</p>
                    <MudButton StartIcon="@Icons.Material.Filled.AttachFile" class="btn btn-secondary-minimal" style="width: auto;"
                               Size="Size.Small" Variant="Variant.Outlined"
                               OnClick="@OpenFilePickerAsync">
                        PDFファイルを選択
                    </MudButton>
                    <small class="d-block mt-2">※PDFファイルのみ、@(Settings.MaxUploadFileSizeMB.ToString("0.#"))以下のファイルを選択してください</small>


                </MudPaper>
            </ActivatorContent>

        </MudFileUpload>

        <div class="form-section-minimal">
            <h2>パスワード設定</h2>
            <div class="row">
                <div class="col-md-6">
                    <div class="form-group-minimal">
                        <label for="viewPassword">閲覧パスワード</label>
                        <MudTextField @bind-Value="userPassword"
                                      InputType="InputType.Password" Elevation="0"
                                      Style="width: 100%;font-size: 1rem;border: 1px solid #ced4da;border-radius: 4px;box-sizing: border-box;"
                                      placeholder="半角英数字"
                                      Variant="Variant.Outlined"
                                      OnBlur="IsExecute" />
                        <small>PDFを開く際に必要なパスワード</small>
                    </div>
                </div>
                <div class="col-md-6">
                    <div class="form-group-minimal">
                        <label for="editPassword">編集パスワード</label>
                        <MudTextField @bind-Value="ownerPassword"
                                      InputType="InputType.Password" Elevation="0"
                                      Style="width: 100%;font-size: 1rem;border: 1px solid #ced4da;border-radius: 4px;box-sizing: border-box;"
                                      Variant="Variant.Outlined"
                                      OnBlur="IsExecute" />
                        <small>PDF編集時に必要なパスワード</small>
                    </div>
                </div>
            </div>
        </div>

        <MudButton StartIcon="@Icons.Material.Filled.Download" Size="Size.Large"
                   Color="Color.Primary"
                   Variant="Variant.Filled"
                   OnClick="@Upload"
                   Disabled="@(!isExecuteBtn)"
                   Class="btn"
                   Style="color: #fff;background-color: #0d6efd;border-color: #0d6efd;">
            保護されたPDFを作成
        </MudButton>

    </div>

    @* </div> *@
</MudContainer>

@code {

    private void IsExecute()
    {
        if (_fileList.Count > 0 && (!string.IsNullOrWhiteSpace(userPassword) || !string.IsNullOrEmpty(ownerPassword)))
        {
            isExecuteBtn = true; // 実行ボタンを有効化
            StateHasChanged();
        }
        else
        {
            isExecuteBtn = false;
            StateHasChanged();
        }
    }

    private long MaxSizeByte = 1;   // 最大ファイルサイズ（バイト単位）
    private bool isExecuteBtn = false; // 実行ボタンの有効/無効状態

    // UI状態管理のプロパティ
    private bool isProcessing = false;               // 処理中フラグ
    private string processingMessage = string.Empty; // 処理中メッセージ
    private string errorMessage = string.Empty;      // エラーメッセージ
    private string successMessage = string.Empty;    // 成功メッセージ

    private MudFileUpload<IReadOnlyList<IBrowserFile>>? _fileUpload;
    private List<IBrowserFile> _fileList = new();
    private readonly List<string> _fileNames = new();

    //private const string DefaultDragClass = "relative rounded-lg border-2 border-dashed pa-4 mt-4 mud-width-full mud-height-full";
    private const string DefaultDragClass = " ";
    private string _dragClass = DefaultDragClass;

    // パスワード関連のプロパティ
    private string userPassword = string.Empty;      // 閲覧パスワード
    private string ownerPassword = string.Empty;     // 編集パスワード

    /// <summary>
    /// 初期処理
    /// </summary>
    protected override void OnInitialized()
    {
        // settingsから最大ファイルサイズを取得
        MaxSizeByte = Convert.ToInt64(Settings.MaxUploadFileSize);
    }

    // クリア処理
    private async Task ClearAsync()
    {
        await (_fileUpload?.ClearAsync() ?? Task.CompletedTask);
        _fileList.Clear();
        _fileNames.Clear();
        // MudPaperの協調表示 End
        ClearDragClass();
    }

    // ファイル選択ダイアログを開く非同期メソッド
    private Task OpenFilePickerAsync()
    => _fileUpload?.OpenFilePickerAsync() ?? Task.CompletedTask;

    // ファイル選択時の処理
    private void OnInputFileChanged(InputFileChangeEventArgs e)
    {
        try
        {
            // MudPaperの協調表示 End
            ClearDragClass();
            // 選択されたファイルを取得
            var files = e.GetMultipleFiles();

            foreach (var file in files)
            {
                // ファイルサイズチェック（1MB = 1,048,576 bytes）
                if (file.Size > MaxSizeByte)
                {
                    errorMessage = "ファイルサイズが10MBを超えています。10MB以下のファイルを選択してください。";
                    return;
                }
                // PDFファイル形式チェック
                if (!file.ContentType.Equals("application/pdf", StringComparison.OrdinalIgnoreCase) &&
                    !file.Name.EndsWith(".pdf", StringComparison.OrdinalIgnoreCase))
                {
                    errorMessage = "PDFファイルを選択してください。";
                    return;
                }
                _fileList.Clear();
                _fileList.Add(file);
                _fileNames.Add(file.Name);
                break;
            }
        }
        catch (Exception ex)
        {
            errorMessage = $"ファイル選択時にエラーが発生しました: {ex.Message}";
        }
        finally
        {
            IsExecute(); // パスワード入力欄の有効/無効を更新
        }
    }

    // ファイルアップロードの処理
    private async Task Upload()
    {
        // ファイルが選択されていない、またはパスワードが設定されていない場合は処理を中止
        if (!IsSelectFile() || !CanSetPassword()) return;

        try
        {
            isProcessing = true;
            // メッセージエリアを初期化
            processingMessage = "パスワードを設定しています...";
            ClearMessages();
            StateHasChanged();

            // ファイルをバイト配列として読み込み
            using var stream = _fileList[0].OpenReadStream(maxAllowedSize: MaxSizeByte);
            var buffer = new byte[_fileList[0].Size];
            await stream.ReadAsync(buffer);

            // リクエスト作成
            var request = new AddPasswordToPdfRequest
            {
                PdfFile = buffer,
                UserPassword = userPassword,
                OwnerPassword = ownerPassword
            };

            var json = JsonSerializer.Serialize(request);
            var content = new StringContent(json, Encoding.UTF8, "application/json");

            // API呼び出し
            var response = await Http.PostAsync("api/AddPasswordToPdf", content);
            var responseJson = await response.Content.ReadFromJsonAsync<AddPasswordToPdfResponse>();

            // エラーメッセージが設定されている場合は処理を中止
            if (!CheckResponse(response, responseJson)) return;

            // 成功メッセージを設定
            // ブラウザでファイルダウンロードを実行
            await DownloadFile(responseJson!.PdfFile, DateTime.Now.ToString("yyyyMMdd_HHmmss_") + _fileList[0].Name);

            Snackbar.Configuration.PositionClass = Defaults.Classes.Position.TopCenter;
            Snackbar.Add("ダウンロードが完了しました。");


        }
        catch (Exception ex)
        {
            errorMessage = $"パスワード設定処理中にエラーが発生しました: {ex.Message}";
            return;
        }
        finally
        {
            // 処理中状態を解除
            isProcessing = false;
            processingMessage = string.Empty;
            StateHasChanged();
        }
    }

    private bool CheckResponse(HttpResponseMessage response, AddPasswordToPdfResponse? responseJson)
    {
        // レスポンスがnullまたは成功フラグがfalseの場合はエラー
        if (response.IsSuccessStatusCode)
        {
            if (responseJson == null)
            {
                errorMessage = "APIからのレスポンスが無効です。";
                return false;
            }
            if (!responseJson.Success)
            {
                errorMessage = $"APIエラー: {responseJson.Message}";
                return false;
            }

            //
            return true;
        }
        else
        {
            // 400エラーの場合、レスポンスボディにエラー情報が含まれる
            if (response.StatusCode == System.Net.HttpStatusCode.BadRequest)
            {
                errorMessage = "400エラー: APIエラー: 無効なリクエストです。";
                return false;
            }
            // 500エラーの場合、レスポンスボディは空
            else if (response.StatusCode == System.Net.HttpStatusCode.InternalServerError)
            {

                errorMessage = "500エラー: サーバー内部エラー";
                return false;
            }
            else
            {
                errorMessage = $"{(int)response.StatusCode}エラー: {response.ReasonPhrase}";
                return false;
            }
        }
    }

    /// <summary>
    /// ファイルダウンロード処理
    /// </summary>
    /// <param name="fileBytes">ファイルのバイト配列</param>
    /// <param name="fileName">ダウンロードファイル名</param>
    private async Task DownloadFile(byte[] fileBytes, string fileName)
    {
        // JavaScriptを使用してファイルダウンロードを実行
        await JSRuntime.InvokeVoidAsync("downloadFile", Convert.ToBase64String(fileBytes), fileName);
    }

    private bool IsSelectFile()
    {
        // ファイルが選択されているかチェック
        return _fileList.Count > 0;
    }

    /// <summary>
    /// パスワード設定可能かチェック
    /// </summary>
    /// <returns>設定可能な場合true</returns>
    private bool CanSetPassword()
    {
        // 閲覧パスワードまたは編集パスワードのいずれかが入力されている場合に設定可能
        return !string.IsNullOrWhiteSpace(userPassword) || !string.IsNullOrWhiteSpace(ownerPassword);
    }

    /// <summary>
    /// メッセージをクリア
    /// </summary>
    private void ClearMessages()
    {
        errorMessage = string.Empty;
        successMessage = string.Empty;
    }

    /// <summary>
    /// ファイルサイズ（バイト）を適切な単位（B, KB, MB, GB...）の文字列に変換します。
    /// </summary>
    /// <param name="bytes">ファイルサイズ（バイト単位）</param>
    /// <returns>フォーマットされたファイルサイズの文字列</returns>
    private string FormatFileSize(long bytes)
    {
        if (bytes == 0) return "0 B";

        string[] suffixes = { "B", "KB", "MB", "GB", "TB", "PB" };
        int i = (int)Math.Floor(Math.Log(bytes, 1024));
        return $"{bytes / Math.Pow(1024, i):F2} {suffixes[i]}";
    }

    // MudPaperの協調表示 Begin
    private void SetDragClass()
        => _dragClass = $"{DefaultDragClass} mud-border-primary";

    // MudPaperの協調表示 End
    private void ClearDragClass()
        => _dragClass = DefaultDragClass;

}

<hr>
<div class="passga-container-minimal">
    <div class="passga-header">
        <h1>PassGa PDF</h1>
        <p>「パスッと設定、ガシッとガード」をコンセプトに、PDFのパスワード管理をシンプルにします。</p>
    </div>

    <div class="upload-box-minimal">
        <p>PDFファイルをここにドラッグ＆ドロップ</p>
        <button class="btn btn-secondary-minimal" style="width: auto;">PDFファイルを選択</button>
        <small class="d-block mt-2">※PDFファイルのみ、10MB以下のファイルを選択してください</small>
    </div>

    <div class="form-section-minimal">
        <h2>パスワード設定</h2>
        <div class="row">
            <div class="col-md-6">
                <div class="form-group-minimal">
                    <label for="viewPassword">閲覧パスワード</label>
                    <input type="password" id="viewPassword" class="form-control-minimal" placeholder="半角英数字">
                    <small>PDFを開く際に必要なパスワード</small>
                </div>
            </div>
            <div class="col-md-6">
                <div class="form-group-minimal">
                    <label for="editPassword">編集パスワード</label>
                    <input type="password" id="editPassword" class="form-control-minimal" placeholder="半角英数字">
                    <small>PDF編集時に必要なパスワード</small>
                </div>
            </div>
        </div>
    </div>

    <button class="btn btn-primary-minimal">
        <i class="fas fa-shield-alt"></i> 保護されたPDFを作成
    </button>
</div>

